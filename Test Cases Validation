// api/src/health/health.controller.spec.ts
import { Test, TestingModule } from '@nestjs/testing';
import { ConfigService } from '@nestjs/config';
import { HealthController } from './health.controller';

describe('HealthController', () => {
  let controller: HealthController;
  let configService: ConfigService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [HealthController],
      providers: [
        {
          provide: ConfigService,
          useValue: {
            get: jest.fn((key: string, defaultValue?: any) => {
              const config = {
                'NODE_ENV': 'test',
                'API_VERSION': 'v1',
              };
              return config[key] || defaultValue;
            }),
          },
        },
      ],
    }).compile();

    controller = module.get<HealthController>(HealthController);
    configService = module.get<ConfigService>(ConfigService);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should return health status', () => {
    const result = controller.getHealth();
    
    expect(result).toHaveProperty('ok', true);
    expect(result).toHaveProperty('build');
    expect(result).toHaveProperty('env', 'staging'); // test env maps to staging
    expect(result).toHaveProperty('timestamp');
    expect(result).toHaveProperty('version', 'v1');
    expect(typeof result.build).toBe('string');
    expect(typeof result.timestamp).toBe('string');
  });

  it('should return production env for production NODE_ENV', () => {
    jest.spyOn(configService, 'get').mockImplementation((key: string) => {
      if (key === 'NODE_ENV') return 'production';
      if (key === 'API_VERSION') return 'v1';
      return undefined;
    });

    const result = controller.getHealth();
    expect(result.env).toBe('production');
  });
});

// Test script for manual validation
// test-health-endpoint.js
const axios = require('axios');

async function testHealthEndpoint() {
  const baseUrl = process.env.API_URL || 'http://localhost:3001';
  
  try {
    console.log('üß™ Testing Health Endpoint...');
    const response = await axios.get(`${baseUrl}/health`);
    
    console.log('‚úÖ Status:', response.status);
    console.log('üìã Response:', JSON.stringify(response.data, null, 2));
    
    // Validations
    const data = response.data;
    
    if (data.ok !== true) {
      throw new Error('Health check failed: ok is not true');
    }
    
    if (!data.build || typeof data.build !== 'string') {
      throw new Error('Health check failed: build field missing or invalid');
    }
    
    if (!['production', 'staging'].includes(data.env)) {
      throw new Error('Health check failed: env must be production or staging');
    }
    
    console.log('‚úÖ All validations passed!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    process.exit(1);
  }
}

// CURL examples for manual testing
/*
# Basic health check
curl -X GET http://localhost:3001/health

# With headers
curl -X GET http://localhost:3001/health \
  -H "Accept: application/json" \
  -H "User-Agent: HealthCheck/1.0"

# Production endpoint
curl -X GET https://your-api-domain.com/health
*/
